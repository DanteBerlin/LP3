#include <iostream>
using namespace std;
const int N = 8; // Size of the chessboard
// Function to print the chessboard
void print_board(int board[N][N]) 
    {
    for (int row = 0; row < N; row++) 
        {
        for (int col = 0; col < N; col++) 
            {
            cout << (board[row][col] == 1 ? 'Q' : '.') << " ";
            }
        cout << endl;
        }
    }

bool is_safe(int board[N][N], int row, int col, int init_row, int init_col) 
    {
    // Check the column for previous queens, ensuring no conflict with initial queen
    for (int i = 0; i < row; i++) 
        {
        if (board[i][col] == 1) 
            {
            return false;
            }
        }
    
    // Check the upper left diagonal, ensuring no conflict with initial queen
    for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) 
        {
        if (board[i][j] == 1) 
            {
            return false;
            }
        }
 
    // Check the upper right diagonal, ensuring no conflict with initial queen
    for (int i = row - 1, j = col + 1; i >= 0 && j < N; i--, j++) 
        {
        if (board[i][j] == 1) 
            {
            return false;
            }
        }
    // Check that we are not placing in the same column or diagonal as the initial queen
    if (col == init_col || abs(row - init_row) == abs(col - init_col)) 
        {
        return false;
        }

    return true; // Safe to place the queen
    }

// Function to solve the N-Queens problem from a given row
bool solve(int board[N][N], int row, int init_row, int init_col) 
    {
    // If all queens are placed
    if (row == N) 
        {
        print_board(board);
        return true; // Solution found
        }

    // Skip the row with the initial queen
    if (row == init_row) 
        {
        return solve(board, row + 1, init_row, init_col);
        }

    // Try placing a queen in each column of the current row
    for (int col = 0; col < N; col++) 
        {
        if (is_safe(board, row, col, init_row, init_col)) 
            {
            board[row][col] = 1; // Place the queen
            if (solve(board, row + 1, init_row, init_col)) 
                {
                return true; // Solution found
                }
            board[row][col] = 0; // Backtrack
            }
        }
    return false; // No solution found
    }

int main() 
    {
    int board[N][N] = {0}; // Initialize the chessboard
    int init_row, init_col;

    cout << "Enter the row (0-7) for the first queen: ";
    cin >> init_row;
    cout << "Enter the column (0-7) for the first queen: ";
    cin >> init_col;

    // Place the first queen at the specified position
    board[init_row][init_col] = 1;
    cout << "\nPlacing the first queen at position (" << init_row << ", " << init_col << ")" << endl;
    cout << "The initial board setup is:" << endl;
    print_board(board);
    cout << endl;

    // Start solving from the first row
    if (!solve(board, 0, init_row, init_col)) 
        {
        cout << "\nNo solution exists for the given starting position." << endl;
        }

    return 0;
    }
    

