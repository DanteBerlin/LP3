#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Item {
    int weight;
    int value;
};
// Comparison function to sort items based on value-to-weight ratio
bool compareItems(const Item &a, const Item &b) {
    double r1 = (double)a.value / a.weight;
    double r2 = (double)b.value / b.weight;
    return r1 > r2;
}
double fractionalKnapsack(int W, vector<Item> &items) {
    sort(items.begin(), items.end(), compareItems); // Sort items by value-to-weight ratio
    double maxValue = 0.0; // Total maximum value we can carry

    for (const Item &item : items) {
        if (W == 0) break; // No more capacity left

        if (item.weight <= W) {
            W -= item.weight;
            maxValue += item.value;
        } else {
            // Take fractional part
            maxValue += item.value * ((double)W / item.weight);
            W = 0;
        }
    }
    return maxValue;
}

int main() {
    int n, W;
   cout << "Enter the number of items: ";
    cin >> n;
   cout << "Enter the maximum weight capacity of the knapsack: "<<endl;
   
 cin >> W;

  vector<Item> items(n);
    for (int i = 0; i < n; ++i) {
        cout << "Enter value and weight of item " << i + 1 << ": ";
        cin >> items[i].value >> items[i].weight;
    }

    double maxVal = fractionalKnapsack(W, items);
    cout << "The maximum value in the knapsack is: " << maxVal << endl;
    return 0;
}
