#include <iostream>
#include <vector>
using namespace std;

int knapsack(int W, int weights[], int values[], int n, vector<int>& items_in_sack) {
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

    // Build the DP table
    for (int i = 1; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (weights[i - 1] <= w)
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]);
            else
                dp[i][w] = dp[i - 1][w];
        }
    }

    // Find which items are included
    int w = W;
    for (int i = n; i > 0 && w > 0; i--) {
        if (dp[i][w] != dp[i - 1][w]) {  // Item i-1 is included
            items_in_sack.push_back(i - 1);
            w -= weights[i - 1];
        }
    }

    return dp[n][W];
}

int main() {
    int n, W;
    cout << "Enter the number of items: ";
    cin >> n;
    cout << "Enter the maximum weight of the knapsack: ";
    cin >> W;

    int weights[n], values[n];
    cout << "Enter the weights of the items: ";
    for (int i = 0; i < n; i++) {
        cin >> weights[i];
    }

    cout << "Enter the values of the items: ";
    for (int i = 0; i < n; i++) {
        cin >> values[i];
    }

    vector<int> items_in_sack;
    int max_value = knapsack(W, weights, values, n, items_in_sack);

    cout << "The maximum value that can be obtained is: " << max_value << endl;
    cout << "Items included in the knapsack (0-indexed): ";
    for (int item : items_in_sack) {
        cout << item << " ";
    }
    cout << endl;

return 0;
}